#!/home/teppey/opt/bin/gosh
;; vim:set ft=scheme fileencoding=utf-8:

;;;
;;; gosh-rlx - Gauche-readline repl with listener
;;;
;;;
;;; Readline module for Gauche
;;; <http://www.netlab.is.tsukuba.ac.jp/~yokota/izumi/gauche/>
;;;
;;;
;;; Please send bug reports and comments to:
;;;   temada@gmail.com   Teppei Hamada
;;;
;;;
;;; [user] -> [readline repl] ------> +------------+
;;;                                   | named pipe | -> [evaluator]
;;; [other process (e.g. vim)] -----> +------------+
;;;


;; TODO
;;   - show stacktrace on error
;;   - allow multiple invocation?
;;   - handling command line options like gosh(-I,-A,...)
;;   - illustrated comment
;;   - testing infinite loop
;;   - signal handling
;;   - use unix domain sokcet instead name pipe to avoid order dependency

(use gauche.threads)
(use gauche.interactive)
(use gauche.listener :only (complete-sexp?))
(use srfi-1 :only (append-map))
(use file.util)
(use term.readline)

(define (start-evaluator!)
  (define (error-handler condition)
    (if (and (condition? condition)
             (condition-has-type? condition <message-condition>))
      (format #t "Error: ~a\n" (condition-ref condition 'message))
      (format #t "Error: ~a\n" (x->string condition))))
  (define (interactive?)
    (eq? (thread-specific (current-thread)) 'root))
  (define (repl to from)
    ;; Note that binding order is important to avoid deadlock.
    (let* ([sexps (call-with-input-file to port->sexp-list)]
           [output (if (interactive?)
                     (open-output-file from)
                     (current-output-port))])
      (with-output-to-port output
        (lambda ()
          (unless (interactive?) (newline))
          ;; eval-print
          (guard (e (else (error-handler e)))
            (for-each (^e (call-with-values
                            (lambda () (eval e (interaction-environment)))
                            (lambda results
                              (for-each (^r (write/ss r) (newline))
                                        results))))
                      sexps))
          (unless (interactive?) (display "gosh> "))
          (flush)))
      (when (interactive?)
        (thread-specific-set! (current-thread) #f)
        (close-output-port output))
      (repl to from)))
  (define (channel-initialize!)
    (let* ([dir (build-path (home-directory) #`".gosh-rlx")]
           [to (build-path dir "to")]
           [from (build-path dir "from")])
      (unless (file-exists? dir) (sys-mkdir dir #o0700))
      (unless (file-exists? to) (sys-mkfifo to #o0600))
      (unless (file-exists? from) (sys-mkfifo from #o0600))
      (values dir to from)))
  (receive (dir to from)
    (channel-initialize!)
    (let1 th (make-thread (cut repl to from))
      (values dir to from (thread-start! th)))))

(define (history-file)
  (build-path (home-directory) ".gosh_history"))

(define (rl-init!)
  (define (all-functions-list)
    (append-map (^m (hash-table-map (module-table m)
                    (^(sym gloc) (symbol->string sym))))
                (all-modules)))
  (rl-read-history! (history-file))
  (rl-set-application-name!            "Gauche")
  (rl-set-basic-word-break-characters! " \t\n()',\";")
  (rl-set-basic-quote-characters!      "\"")
  (rl-set-prompt!                      :ps1 "gosh> " :ps2 "..... ")
  (rl-set-completion-list-function!    (lambda () (all-functions-list)))
  (rl-stifle-history!                  1000))

(define (start-interaction! to from eval-thread)
  (let1 readline-port (make-readline-input-port)
    (rl-init!)
    (let/cc break
      (while #t
        (rl-set-prompt-state! 'ps1)
        (let loop ((line (read-line readline-port)))
          (cond [(eof-object? line)
                 (break #f)]
                [(complete-sexp? line)
                 (thread-specific-set! eval-thread 'root)
                 ;; Request evaluation
                 (call-with-output-file to (cut display line <>))
                 ;; Receive results
                 (call-with-input-file from
                   (^(in) (until (read-line in) eof-object? => line
                            (print line))))
                 (rl-commit-history!)]
                [else
                  ;; Continuous line; add newline that because read-line
                  ;; remove line-terminator.
                  (loop (string-append
                          #`",|line|\n" (read-line readline-port)))]))))))

(define (main _)
  (let1 channel-directory #f
    (dynamic-wind
      (lambda () #f)
      (lambda ()
        (receive (dir to from eval-thread) (start-evaluator!)
          (set! channel-directory dir)
          (start-interaction! to from eval-thread)))
      (lambda ()
        (rl-write-history (history-file))
        (exit 0)))))
